name: Go Multi-Platform Release

on:
  push:
    branches:
      - ci-test
    tags:
      - 'test-v*.*.*'

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build:
          - os: linux
            arch: amd64
            cgo: 1
            deps: libgl1-mesa-dev xorg-dev
          - os: linux
            arch: arm64
            cgo: 1
            deps: libgl1-mesa-dev xorg-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          - os: windows
            arch: amd64
            cgo: 0
          - os: darwin
            arch: amd64
            cgo: 1
            deps: gcc-multilib
          - os: darwin
            arch: arm64
            cgo: 1
            deps: gcc-multilib

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 安装所有平台所需的构建依赖
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.build.deps || 'gcc' }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with: 
          go-version: '1.23.0'

      - name: Get dependencies
        run: go mod download

      - name: Set up macOS cross-compiler (for Linux)
        if: matrix.build.os == 'darwin'
        run: |
          sudo apt-get install -y clang gcc-multilib
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          wget -nc https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.15.sdk.tar.xz
          mv MacOSX10.15.sdk.tar.xz tarballs/
          UNATTENDED=1 ./build.sh
          echo "OSXCROSS_PATH=$(pwd)/target/bin" >> $GITHUB_ENV
          echo "CC=o64-clang" >> $GITHUB_ENV
          echo "CXX=o64-clang++" >> $GITHUB_ENV

      - name: Build
        run: |
          OUTPUT="click-${{ matrix.build.os }}-${{ matrix.build.arch }}"
          if [ "${{ matrix.build.os }}" = "windows" ]; then
            OUTPUT="$OUTPUT.exe"
          fi
          
          # macOS 特殊处理
          if [ "${{ matrix.build.os }}" = "darwin" ]; then
            export PATH=$OSXCROSS_PATH:$PATH
            export CC=o64-clang
            export CXX=o64-clang++
          fi
          
          # Linux ARM64 特殊处理
          if [ "${{ matrix.build.os }}" = "linux" ] && [ "${{ matrix.build.arch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export GOARM=7
          fi
          
          CGO_ENABLED=${{ matrix.build.cgo }} \
          GOOS=${{ matrix.build.os }} \
          GOARCH=${{ matrix.build.arch }} \
          go build -ldflags "-s -w" -o "./dist/$OUTPUT" main.go

      - name: Archive artifact
        if: matrix.build.os != 'windows'
        run: |
          cd dist
          tar czf click-${{ matrix.build.os }}-${{ matrix.build.arch }}.tar.gz \
            click-${{ matrix.build.os }}-${{ matrix.build.arch }}

      - name: Archive Windows artifact
        if: matrix.build.os == 'windows'
        run: |
          cd dist
          zip click-windows-amd64.zip click-windows-amd64.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: click-${{ matrix.build.os }}-${{ matrix.build.arch }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Collect release assets
        run: |
          mkdir release-assets
          find artifacts -name '*.tar.gz' -exec cp {} release-assets/ \;
          find artifacts -name '*.zip' -exec cp {} release-assets/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN  }}